// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// C0_given_K0_noRA
double C0_given_K0_noRA(NumericVector income, NumericVector timeIndex, double K0, double r);
RcppExport SEXP _capitulation_C0_given_K0_noRA(SEXP incomeSEXP, SEXP timeIndexSEXP, SEXP K0SEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< double >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(C0_given_K0_noRA(income, timeIndex, K0, r));
    return rcpp_result_gen;
END_RCPP
}
// C0_given_K0_RA
double C0_given_K0_RA(NumericVector income, NumericVector timeIndex, double K0, double r, double gamma);
RcppExport SEXP _capitulation_C0_given_K0_RA(SEXP incomeSEXP, SEXP timeIndexSEXP, SEXP K0SEXP, SEXP rSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< double >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(C0_given_K0_RA(income, timeIndex, K0, r, gamma));
    return rcpp_result_gen;
END_RCPP
}
// C0_given_K0_beta
double C0_given_K0_beta(NumericVector income, NumericVector timeIndex, double K0, double r, double gamma, double beta);
RcppExport SEXP _capitulation_C0_given_K0_beta(SEXP incomeSEXP, SEXP timeIndexSEXP, SEXP K0SEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< double >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(C0_given_K0_beta(income, timeIndex, K0, r, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// assign_referent_cpp
Rcpp::DataFrame assign_referent_cpp(NumericVector id, NumericVector annee, NumericVector conjoint, NumericVector sexe, NumericVector matri, NumericVector referent, NumericVector referent2, NumericVector findet, NumericVector age, NumericVector salaire, NumericVector pere, NumericVector ageMaxPere, NumericVector mere, NumericVector ageMaxMere, NumericVector neFrance);
RcppExport SEXP _capitulation_assign_referent_cpp(SEXP idSEXP, SEXP anneeSEXP, SEXP conjointSEXP, SEXP sexeSEXP, SEXP matriSEXP, SEXP referentSEXP, SEXP referent2SEXP, SEXP findetSEXP, SEXP ageSEXP, SEXP salaireSEXP, SEXP pereSEXP, SEXP ageMaxPereSEXP, SEXP mereSEXP, SEXP ageMaxMereSEXP, SEXP neFranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type annee(anneeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type conjoint(conjointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sexe(sexeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type matri(matriSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type referent(referentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type referent2(referent2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type findet(findetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type salaire(salaireSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pere(pereSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ageMaxPere(ageMaxPereSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mere(mereSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ageMaxMere(ageMaxMereSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type neFrance(neFranceSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_referent_cpp(id, annee, conjoint, sexe, matri, referent, referent2, findet, age, salaire, pere, ageMaxPere, mere, ageMaxMere, neFrance));
    return rcpp_result_gen;
END_RCPP
}
// calibrate_K0
List calibrate_K0(NumericVector age, NumericVector income, NumericVector findetVector, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, double r);
RcppExport SEXP _capitulation_calibrate_K0(SEXP ageSEXP, SEXP incomeSEXP, SEXP findetVectorSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type findetVector(findetVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_K0(age, income, findetVector, K2009vector, timeIndex, UC, r));
    return rcpp_result_gen;
END_RCPP
}
// calibrate_K0_ra
List calibrate_K0_ra(NumericVector age, NumericVector income, NumericVector findetVector, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, double r, double gamma);
RcppExport SEXP _capitulation_calibrate_K0_ra(SEXP ageSEXP, SEXP incomeSEXP, SEXP findetVectorSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type findetVector(findetVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_K0_ra(age, income, findetVector, K2009vector, timeIndex, UC, r, gamma));
    return rcpp_result_gen;
END_RCPP
}
// calibrate_K0_beta
List calibrate_K0_beta(NumericVector age, NumericVector income, NumericVector findetVector, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, double r, double gamma, double beta);
RcppExport SEXP _capitulation_calibrate_K0_beta(SEXP ageSEXP, SEXP incomeSEXP, SEXP findetVectorSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type findetVector(findetVectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_K0_beta(age, income, findetVector, K2009vector, timeIndex, UC, r, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// inherit_wealth
List inherit_wealth(NumericVector id, NumericVector patrimoine, NumericVector year, NumericVector matri_status, NumericVector sexe, NumericVector spouse_id, NumericVector patrimoine_conjoint, NumericVector matri_conjoint, int year_loop, NumericVector referent_list);
RcppExport SEXP _capitulation_inherit_wealth(SEXP idSEXP, SEXP patrimoineSEXP, SEXP yearSEXP, SEXP matri_statusSEXP, SEXP sexeSEXP, SEXP spouse_idSEXP, SEXP patrimoine_conjointSEXP, SEXP matri_conjointSEXP, SEXP year_loopSEXP, SEXP referent_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type patrimoine(patrimoineSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type year(yearSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type matri_status(matri_statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sexe(sexeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type spouse_id(spouse_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type patrimoine_conjoint(patrimoine_conjointSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type matri_conjoint(matri_conjointSEXP);
    Rcpp::traits::input_parameter< int >::type year_loop(year_loopSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type referent_list(referent_listSEXP);
    rcpp_result_gen = Rcpp::wrap(inherit_wealth(id, patrimoine, year, matri_status, sexe, spouse_id, patrimoine_conjoint, matri_conjoint, year_loop, referent_list));
    return rcpp_result_gen;
END_RCPP
}
// fit_K0_old
List fit_K0_old(NumericVector income, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, double r, double gamma, double beta);
RcppExport SEXP _capitulation_fit_K0_old(SEXP incomeSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_K0_old(income, K2009vector, timeIndex, UC, r, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// fit_K0
List fit_K0(NumericVector income, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, NumericVector inheritanceReceived, NumericVector inheritanceGiven, double r, double gamma, double beta);
RcppExport SEXP _capitulation_fit_K0(SEXP incomeSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP inheritanceReceivedSEXP, SEXP inheritanceGivenSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_K0(income, K2009vector, timeIndex, UC, inheritanceReceived, inheritanceGiven, r, gamma, beta));
    return rcpp_result_gen;
END_RCPP
}
// param_K0
List param_K0(double r, double gamma, double beta, NumericVector income, NumericVector UC);
RcppExport SEXP _capitulation_param_K0(SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP incomeSEXP, SEXP UCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    rcpp_result_gen = Rcpp::wrap(param_K0(r, gamma, beta, income, UC));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp_old
List life_cycle_model_cpp_old(NumericVector income, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_life_cycle_model_cpp_old(SEXP incomeSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp_old(income, K2009vector, timeIndex, UC, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp2_old
NumericVector life_cycle_model_cpp2_old(NumericVector income, NumericVector K2009vector, NumericVector timeIndex, NumericVector UC, NumericVector inheritanceGiven, NumericVector inheritanceReceived, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_life_cycle_model_cpp2_old(SEXP incomeSEXP, SEXP K2009vectorSEXP, SEXP timeIndexSEXP, SEXP UCSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type K2009vector(K2009vectorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp2_old(income, K2009vector, timeIndex, UC, inheritanceGiven, inheritanceReceived, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp
NumericVector life_cycle_model_cpp(NumericVector income, NumericVector observed_wealth, NumericVector pi, NumericVector timeIndex, NumericVector inheritanceGiven, NumericVector inheritanceReceived, NumericVector r, NumericVector risk_aversion, NumericVector discount_factor, String scale_model, String outcome);
RcppExport SEXP _capitulation_life_cycle_model_cpp(SEXP incomeSEXP, SEXP observed_wealthSEXP, SEXP piSEXP, SEXP timeIndexSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP risk_aversionSEXP, SEXP discount_factorSEXP, SEXP scale_modelSEXP, SEXP outcomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observed_wealth(observed_wealthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk_aversion(risk_aversionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type discount_factor(discount_factorSEXP);
    Rcpp::traits::input_parameter< String >::type scale_model(scale_modelSEXP);
    Rcpp::traits::input_parameter< String >::type outcome(outcomeSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp(income, observed_wealth, pi, timeIndex, inheritanceGiven, inheritanceReceived, r, risk_aversion, discount_factor, scale_model, outcome));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp_bis
NumericVector life_cycle_model_cpp_bis(NumericVector income, NumericVector observed_wealth, NumericVector pi, NumericVector timeIndex, NumericVector inheritanceGiven, NumericVector inheritanceReceived, NumericVector r, NumericVector risk_aversion, NumericVector discount_factor, String scale_model, bool return_last);
RcppExport SEXP _capitulation_life_cycle_model_cpp_bis(SEXP incomeSEXP, SEXP observed_wealthSEXP, SEXP piSEXP, SEXP timeIndexSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP risk_aversionSEXP, SEXP discount_factorSEXP, SEXP scale_modelSEXP, SEXP return_lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observed_wealth(observed_wealthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk_aversion(risk_aversionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type discount_factor(discount_factorSEXP);
    Rcpp::traits::input_parameter< String >::type scale_model(scale_modelSEXP);
    Rcpp::traits::input_parameter< bool >::type return_last(return_lastSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp_bis(income, observed_wealth, pi, timeIndex, inheritanceGiven, inheritanceReceived, r, risk_aversion, discount_factor, scale_model, return_last));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp_uncertainty
NumericVector life_cycle_model_cpp_uncertainty(NumericVector income, NumericVector observed_wealth, NumericVector pi, NumericVector timeIndex, NumericVector inheritanceGiven, NumericVector inheritanceReceived, NumericVector r, NumericVector risk_aversion, NumericVector discount_factor, String scale_model);
RcppExport SEXP _capitulation_life_cycle_model_cpp_uncertainty(SEXP incomeSEXP, SEXP observed_wealthSEXP, SEXP piSEXP, SEXP timeIndexSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP risk_aversionSEXP, SEXP discount_factorSEXP, SEXP scale_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observed_wealth(observed_wealthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk_aversion(risk_aversionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type discount_factor(discount_factorSEXP);
    Rcpp::traits::input_parameter< String >::type scale_model(scale_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp_uncertainty(income, observed_wealth, pi, timeIndex, inheritanceGiven, inheritanceReceived, r, risk_aversion, discount_factor, scale_model));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_model_cpp_bis_uncertainty
NumericVector life_cycle_model_cpp_bis_uncertainty(NumericVector income, NumericVector observed_wealth, NumericVector pi, NumericVector timeIndex, NumericVector inheritanceGiven, NumericVector inheritanceReceived, NumericVector r, NumericVector risk_aversion, NumericVector discount_factor, String scale_model, bool return_last);
RcppExport SEXP _capitulation_life_cycle_model_cpp_bis_uncertainty(SEXP incomeSEXP, SEXP observed_wealthSEXP, SEXP piSEXP, SEXP timeIndexSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP risk_aversionSEXP, SEXP discount_factorSEXP, SEXP scale_modelSEXP, SEXP return_lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observed_wealth(observed_wealthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk_aversion(risk_aversionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type discount_factor(discount_factorSEXP);
    Rcpp::traits::input_parameter< String >::type scale_model(scale_modelSEXP);
    Rcpp::traits::input_parameter< bool >::type return_last(return_lastSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_model_cpp_bis_uncertainty(income, observed_wealth, pi, timeIndex, inheritanceGiven, inheritanceReceived, r, risk_aversion, discount_factor, scale_model, return_last));
    return rcpp_result_gen;
END_RCPP
}
// wrapper_function
Rcpp::DataFrame wrapper_function(List elem, Function f, String id_var, String annee_var, String income_var, String observed_wealth_var, String time_var, String weight_var, String inheritanceGiven_var, String inheritanceReceived_var, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_wrapper_function(SEXP elemSEXP, SEXP fSEXP, SEXP id_varSEXP, SEXP annee_varSEXP, SEXP income_varSEXP, SEXP observed_wealth_varSEXP, SEXP time_varSEXP, SEXP weight_varSEXP, SEXP inheritanceGiven_varSEXP, SEXP inheritanceReceived_varSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type elem(elemSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< String >::type id_var(id_varSEXP);
    Rcpp::traits::input_parameter< String >::type annee_var(annee_varSEXP);
    Rcpp::traits::input_parameter< String >::type income_var(income_varSEXP);
    Rcpp::traits::input_parameter< String >::type observed_wealth_var(observed_wealth_varSEXP);
    Rcpp::traits::input_parameter< String >::type time_var(time_varSEXP);
    Rcpp::traits::input_parameter< String >::type weight_var(weight_varSEXP);
    Rcpp::traits::input_parameter< String >::type inheritanceGiven_var(inheritanceGiven_varSEXP);
    Rcpp::traits::input_parameter< String >::type inheritanceReceived_var(inheritanceReceived_varSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(wrapper_function(elem, f, id_var, annee_var, income_var, observed_wealth_var, time_var, weight_var, inheritanceGiven_var, inheritanceReceived_var, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// life_cycle_apply
List life_cycle_apply(List input, Function f, String id_var, String annee_var, String income_var, String observed_wealth_var, String time_var, String weight_var, String Hgiven_var, String Hreceived_var, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_life_cycle_apply(SEXP inputSEXP, SEXP fSEXP, SEXP id_varSEXP, SEXP annee_varSEXP, SEXP income_varSEXP, SEXP observed_wealth_varSEXP, SEXP time_varSEXP, SEXP weight_varSEXP, SEXP Hgiven_varSEXP, SEXP Hreceived_varSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< String >::type id_var(id_varSEXP);
    Rcpp::traits::input_parameter< String >::type annee_var(annee_varSEXP);
    Rcpp::traits::input_parameter< String >::type income_var(income_varSEXP);
    Rcpp::traits::input_parameter< String >::type observed_wealth_var(observed_wealth_varSEXP);
    Rcpp::traits::input_parameter< String >::type time_var(time_varSEXP);
    Rcpp::traits::input_parameter< String >::type weight_var(weight_varSEXP);
    Rcpp::traits::input_parameter< String >::type Hgiven_var(Hgiven_varSEXP);
    Rcpp::traits::input_parameter< String >::type Hreceived_var(Hreceived_varSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(life_cycle_apply(input, f, id_var, annee_var, income_var, observed_wealth_var, time_var, weight_var, Hgiven_var, Hreceived_var, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// uncertainty_conso
NumericVector uncertainty_conso(NumericVector income, NumericVector observed_wealth, NumericVector pi, NumericVector timeIndex, NumericVector inheritanceGiven, NumericVector inheritanceReceived, NumericVector r, NumericVector risk_aversion, NumericVector discount_factor, String scale_model);
RcppExport SEXP _capitulation_uncertainty_conso(SEXP incomeSEXP, SEXP observed_wealthSEXP, SEXP piSEXP, SEXP timeIndexSEXP, SEXP inheritanceGivenSEXP, SEXP inheritanceReceivedSEXP, SEXP rSEXP, SEXP risk_aversionSEXP, SEXP discount_factorSEXP, SEXP scale_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type observed_wealth(observed_wealthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type timeIndex(timeIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceGiven(inheritanceGivenSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type inheritanceReceived(inheritanceReceivedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type risk_aversion(risk_aversionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type discount_factor(discount_factorSEXP);
    Rcpp::traits::input_parameter< String >::type scale_model(scale_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(uncertainty_conso(income, observed_wealth, pi, timeIndex, inheritanceGiven, inheritanceReceived, r, risk_aversion, discount_factor, scale_model));
    return rcpp_result_gen;
END_RCPP
}
// simulate_wealth_structural
NumericVector simulate_wealth_structural(NumericVector K0, NumericVector consumption0, NumericVector income, NumericVector UC, double r, bool returnLast);
RcppExport SEXP _capitulation_simulate_wealth_structural(SEXP K0SEXP, SEXP consumption0SEXP, SEXP incomeSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type consumption0(consumption0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_wealth_structural(K0, consumption0, income, UC, r, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// simulate_wealth_structural_ra
NumericVector simulate_wealth_structural_ra(NumericVector K0, NumericVector consumption0, NumericVector income, NumericVector UC, double r, double gamma, bool returnLast);
RcppExport SEXP _capitulation_simulate_wealth_structural_ra(SEXP K0SEXP, SEXP consumption0SEXP, SEXP incomeSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type consumption0(consumption0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_wealth_structural_ra(K0, consumption0, income, UC, r, gamma, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// simulate_wealth_structural_beta
NumericVector simulate_wealth_structural_beta(NumericVector K0, NumericVector consumption0, NumericVector income, NumericVector UC, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_simulate_wealth_structural_beta(SEXP K0SEXP, SEXP consumption0SEXP, SEXP incomeSEXP, SEXP UCSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type consumption0(consumption0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_wealth_structural_beta(K0, consumption0, income, UC, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// simulate_wealth_structural_beta2
NumericVector simulate_wealth_structural_beta2(NumericVector K0, NumericVector consumption0, NumericVector income, NumericVector UC, NumericVector tau, double r, double gamma, double beta, bool returnLast);
RcppExport SEXP _capitulation_simulate_wealth_structural_beta2(SEXP K0SEXP, SEXP consumption0SEXP, SEXP incomeSEXP, SEXP UCSEXP, SEXP tauSEXP, SEXP rSEXP, SEXP gammaSEXP, SEXP betaSEXP, SEXP returnLastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type consumption0(consumption0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type income(incomeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type UC(UCSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type returnLast(returnLastSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_wealth_structural_beta2(K0, consumption0, income, UC, tau, r, gamma, beta, returnLast));
    return rcpp_result_gen;
END_RCPP
}
// subset_range
Rcpp::NumericVector subset_range(Rcpp::NumericVector x, int start, int end);
RcppExport SEXP _capitulation_subset_range(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_range(x, start, end));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_capitulation_C0_given_K0_noRA", (DL_FUNC) &_capitulation_C0_given_K0_noRA, 4},
    {"_capitulation_C0_given_K0_RA", (DL_FUNC) &_capitulation_C0_given_K0_RA, 5},
    {"_capitulation_C0_given_K0_beta", (DL_FUNC) &_capitulation_C0_given_K0_beta, 6},
    {"_capitulation_assign_referent_cpp", (DL_FUNC) &_capitulation_assign_referent_cpp, 15},
    {"_capitulation_calibrate_K0", (DL_FUNC) &_capitulation_calibrate_K0, 7},
    {"_capitulation_calibrate_K0_ra", (DL_FUNC) &_capitulation_calibrate_K0_ra, 8},
    {"_capitulation_calibrate_K0_beta", (DL_FUNC) &_capitulation_calibrate_K0_beta, 9},
    {"_capitulation_inherit_wealth", (DL_FUNC) &_capitulation_inherit_wealth, 10},
    {"_capitulation_fit_K0_old", (DL_FUNC) &_capitulation_fit_K0_old, 7},
    {"_capitulation_fit_K0", (DL_FUNC) &_capitulation_fit_K0, 9},
    {"_capitulation_param_K0", (DL_FUNC) &_capitulation_param_K0, 5},
    {"_capitulation_life_cycle_model_cpp_old", (DL_FUNC) &_capitulation_life_cycle_model_cpp_old, 8},
    {"_capitulation_life_cycle_model_cpp2_old", (DL_FUNC) &_capitulation_life_cycle_model_cpp2_old, 10},
    {"_capitulation_life_cycle_model_cpp", (DL_FUNC) &_capitulation_life_cycle_model_cpp, 11},
    {"_capitulation_life_cycle_model_cpp_bis", (DL_FUNC) &_capitulation_life_cycle_model_cpp_bis, 11},
    {"_capitulation_life_cycle_model_cpp_uncertainty", (DL_FUNC) &_capitulation_life_cycle_model_cpp_uncertainty, 10},
    {"_capitulation_life_cycle_model_cpp_bis_uncertainty", (DL_FUNC) &_capitulation_life_cycle_model_cpp_bis_uncertainty, 11},
    {"_capitulation_wrapper_function", (DL_FUNC) &_capitulation_wrapper_function, 14},
    {"_capitulation_life_cycle_apply", (DL_FUNC) &_capitulation_life_cycle_apply, 14},
    {"_capitulation_uncertainty_conso", (DL_FUNC) &_capitulation_uncertainty_conso, 10},
    {"_capitulation_simulate_wealth_structural", (DL_FUNC) &_capitulation_simulate_wealth_structural, 6},
    {"_capitulation_simulate_wealth_structural_ra", (DL_FUNC) &_capitulation_simulate_wealth_structural_ra, 7},
    {"_capitulation_simulate_wealth_structural_beta", (DL_FUNC) &_capitulation_simulate_wealth_structural_beta, 8},
    {"_capitulation_simulate_wealth_structural_beta2", (DL_FUNC) &_capitulation_simulate_wealth_structural_beta2, 9},
    {"_capitulation_subset_range", (DL_FUNC) &_capitulation_subset_range, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_capitulation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
